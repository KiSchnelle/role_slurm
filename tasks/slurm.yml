---
# 1=compute, 2=database, 3=controller, 4=first controller, 5=all
- name: Install slurm prerequisites.
  ansible.builtin.yum:
    name:
      - "hwloc"
      - "hwloc-devel" # for cgroup Task Affinity Plugin
      - "hdf5-devel" # for HDF5 Job Profiling Plugin
      - "man2html" # for HTML Man Pages Plugin
      - "freeipmi-devel" # for IPMI Energy Consumtion Plugin
      - "libimad"
      - "libibmad-devel" # for InfiniBand Accounting Plugin
      - "libibumad"
      - "libibumad-devel" # for InfiniBand Accounting Plugin
      - "lua"
      - "lua-devel" # for Lua Support Plugin
      - "mysql-devel" # for MySQL Plugin
      - "pam-devel" # for PAM Support Plugin
      - "numactl"
      - "numactl-devel" # for NUMA Affinity Plugin
      - "readline-devel" # for Readline Support Plugin
      - "rrdtool-devel" # for RRD External Sensor Data Collection Plugin
      - "gtk2-devel" # for sview Plugin
      - "rpm-build"
      - "python3"
      - "gcc"
      - "openssl"
      - "openssl-devel"
      - "ncurses-devel"
      - "perl-Switch"
      - "perl-ExtUtils-MakeMaker"
      - "xorg-x11-xauth"
      - "libssh2-devel"
      - "http-parser-devel" # for Slurm REST API
      - "libyaml-devel" # for Slurm REST API
      - "json-c-devel" # for Slurm REST API
      - "libjwt-devel" # for Slurm REST API
    state: present
    update_cache: true
  when: ansible_distribution|lower == 'centos' and ansible_distribution_major_version is version_compare('7', '==')


- name: Install slurm prerequisites.
  block:
    - name: Install slurm prerequisites for CentOS 8.
      ansible.builtin.yum:
        name:
          - "hwloc"
          - "hdf5-devel" # for HDF5 Job Profiling Plugin
          - "man2html" # for HTML Man Pages Plugin
          - "freeipmi-devel" # for IPMI Energy Consumtion Plugin
          - "libimad"
          - "libibmad-devel" # for InfiniBand Accounting Plugin
          - "libibumad"
          - "libibumad-devel" # for InfiniBand Accounting Plugin
          - "lua"
          - "mysql-devel" # for MySQL Plugin
          - "pam-devel" # for PAM Support Plugin
          - "numactl"
          - "numactl-devel" # for NUMA Affinity Plugin
          - "readline-devel" # for Readline Support Plugin
          - "gtk2-devel" # for sview Plugin
          - "rpm-build"
          - "python3"
          - "gcc"
          - "openssl"
          - "openssl-devel"
          - "ncurses-devel"
          - "perl-Switch"
          - "perl-ExtUtils-MakeMaker"
          - "xorg-x11-xauth"
          - "libssh2-devel"
          - "http-parser-devel" # for Slurm REST API
          - "libyaml-devel" # for Slurm REST API
          - "json-c-devel" # for Slurm REST API
          - "libjwt-devel" # for Slurm REST API
        state: present
        update_cache: true
    
    - name: Install slurm prerequisites for CentOS 8.
      ansible.builtin.dnf:
        name: 
          - "rrdtool-devel" # for RRD External Sensor Data Collection Plugin
          - "lua-devel" # for Lua Support Plugin
          - "hwloc-devel" # for cgroup Task Affinity Plugin
        state: present
        update_cache: true
        enablerepo: 
          - "PowerTools"
  when: ansible_distribution|lower == 'centos' and ansible_distribution_major_version is version_compare('8', '==')


- name: Install slurm prerequisites for Ubuntu 20.
  ansible.builtin.apt:
    name:
      - "debhelper"
      - "libncurses5-dev"
      - "po-debconf"
      - "python3"
      - "libgtk2.0-dev"
      - "libpam0g-dev"
      - "libperl-dev"
      - "chrpath"
      - "liblua5.3-dev"
      - "libhwloc-dev" # should include netloc but configure doesnt find it, bug?
      - "dh-exec"
      - "librrd-dev"
      - "libipmimonitoring-dev"
      - "hdf5-helpers"
      - "libfreeipmi-dev"
      - "libhdf5-dev"
      - "man2html"
      - "libcurl4-openssl-dev"
      - "libpmix-dev"
      - "libhttp-parser-dev"
      - "libyaml-dev"
      - "libjwt-dev"
      - "libjson-c-dev"
      - "liblz4-dev"
      - "libnvidia-ml-dev"
      - "libibmad-dev"
      - "libibumad-dev"
      - "numactl"
      - "libnuma-dev"
      - "libreadline-dev"
      - "librrd-dev"
      - "gcc"
      - "openssl"
      - "make"
      - "ruby"
      - "ruby-dev"
    state: present
    update_cache: true
  when: ansible_distribution|lower == 'ubuntu' and ansible_distribution_major_version is version_compare('20', '==')


- name: Check if slurm is installed.
  ansible.builtin.shell: slurmd --version
  register: slurm_installed
  ignore_errors: true
  changed_when: false

  
- name: Download slurm.
  ansible.builtin.get_url:
    url: 'https://download.schedmd.com/slurm/slurm-{{ slurm_version }}.tar.bz2'
    dest: '/var/log/ansible/roles/role_slurm/install/slurm-{{ slurm_version }}.tar.bz2'
  when: slurm_installed is failed


- name: Unarchive download.
  ansible.builtin.unarchive:
    src: '/var/log/ansible/roles/role_slurm/install/slurm-{{ slurm_version }}.tar.bz2'
    dest: '/var/log/ansible/roles/role_slurm/install'
  when: slurm_installed is failed


- name: Configure and build slurm.
  ansible.builtin.shell: 'cd /var/log/ansible/roles/role_slurm/install/slurm-{{ slurm_version }} && ./configure -enable-pam --enable-salloc-kill-cmd && make install && ldconfig -n /usr/lib64'
  when: slurm_installed is failed


- name: Create slurm folders, files and set permissions.
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: "{{ item.state }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items:
    - { path: /var/log/slurm , state: directory , owner: slurm , group: slurm , mode: "0600", install: 5 }
    - { path: /var/log/slurm/archive , state: directory , owner: slurm , group: slurm , mode: "0600", install: 2 }
    - { path: /var/log/slurm/slurmbdb.log  , state: touch , owner: slurm , group: slurm , mode: "0600", install: 2 }
    - { path: /var/log/slurm/slurmctld.log , state: touch , owner: slurm , group: slurm , mode: "0600", install: 3 }
    - { path: /var/log/slurm/slurmd.log , state: touch , owner: root , group: root , mode: "0600", install:  5} # must distinct exist on each node
    - { path: /var/log/slurm/slurmdshed.log , state: touch , owner: slurm , group: slurm , mode: "0600", install: 5 }
    - { path: /var/run/slurm , state: directory , owner: slurm , group: slurm , mode: "0600", install: 5 }
    - { path: /var/run/slurm/slurmdbd.pid , state: touch , owner: slurm , group: slurm , mode: "0600", install: 2 }
    - { path: /var/run/slurm/slurmctld.pid , state: touch , owner: slurm , group: slurm , mode: "0600", install: 3 }
    - { path: /var/run/slurm/slurmd.pid , state: touch , owner: root , group: root , mode: "0600", install: 5 } # must distinct exist on each node
    - { path: /var/spool/slurm , state: directory , owner: slurm , group: slurm , mode: "0600", install: 5 }
    - { path: /var/spool/slurm/d , state: directory , owner: root , group: root , mode: "0600", install: 5 } # must distinct exist on each node
    - { path: /var/spool/slurm/acct , state: directory , owner: slurm , group: slurm , mode: "0600", install: 3 }
    - { path: /var/spool/slurm/acct/history , state: touch , owner: slurm , group: slurm , mode: "0600", install: 3 }
    - { path: /var/spool/slurm/state , state: directory , owner: slurm , group: slurm , mode: "0600", install: 3 }
    - { path: /etc/slurm , state: directory , owner: slurm , group: slurm , mode: "0644", install: 3 }
  when: item.install in install_code_list or item.install == 5


- name: Register device facts.
  block:
    - name: Look for nvidia gpus
      ansible.builtin.shell: "lspci | grep 'VGA compatible controller: NVIDIA' | wc -l"
      register: number_nvidia_gpus
    
    - name: Look for amd gpus
      ansible.builtin.shell: "lspci | grep 'VGA compatible controller: AMD' | wc -l"
      register: number_amd_gpus


- name: Copy config files and set permissions.
  ansible.builtin.template:
    src: "{{ item.path }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items:
    - { path: etc/slurm/slurm.conf.j2 , dest: /etc/slurm/slurm.conf , owner: slurm , group: slurm , mode: "0644" }
    - { path: etc/slurm/slurmdbd.conf.j2 , dest: /etc/slurm/slurmdbd.conf , owner: slurm , group: slurm , mode: "0600" }
    - { path: etc/slurm/gres.conf.j2 , dest: /etc/slurm/gres.conf , owner: slurm , group: slurm , mode: "0644" }
    - { path: etc/slurm/cgroup.conf.j2 , dest: /etc/slurm/cgroup.conf , owner: slurm , group: slurm , mode: "0644" }
    - { path: etc/slurm/topology.conf.j2 , dest: /etc/slurm/topology.conf , owner: slurm , group: slurm , mode: "0644" }
    - { path: etc/slurm/acc_gather.conf , dest: /etc/slurm/acc_gather.conf , owner: slurm , group: slurm , mode: "0644" }
    - { path: etc/slurmcgroup_allowed_devices_file.conf.j2 , dest: /etc/slurm/cgroup_allowed_devices_file.conf , owner: slurm , group: slurm , mode: "0644" }


- name: Copy /etc/slurm/scripts and set permissions.
  ansible.builtin.copy:
    src: etc/slurm/scripts
    dest: /etc/slurm/scripts
    owner: slurm
    group: slurm
    mode: 0755


- name: Copy /etc/logratate.d/slurm and set permissions.
  ansible.builtin.copy:
    src: etc/logrotate.d/slurm
    dest: /etc/logrotate.d/slurm
    owner: root
    gorup: root
    mode: 0600







# second controller link files to storage location



# restart everything

# wirte output from slurmd -C to slurm.conf on controller?
# example output
# NodeName=tlnode001 CPUs=48 Boards=1 SocketsPerBoard=2 CoresPerSocket=12 ThreadsPerCore=2 RealMemory=193261
# UpTime=0-00:19:42








# set firewall



# after all start up
# sacctmgr add account cryo Description="Cryo users" Organization=cryo Cluster=sbcryo
# sacctmgr add account internal Description="Internal users" Organization=internal parent=cryo
# sacctmgr add account external Description="External users" Organization=external parent=cryo
# sacctmgr create user ansible DefaultAccount=internal AdminLevel=Operator